********************************************************************************
********************************** pi_stress ***********************************
********************************************************************************

<------------------------------> With RT <------------------------------>
Starting PI Stress Test
Number of thread groups: 1
Duration of test run: 10 seconds
Number of inversions per group: unlimited
Test threads using scheduler policy: SCHED_FIFO
    Admin thread priority:  4
1 groups of 3 threads will be created
    High thread priority:   3
    Med  thread priority:   2
    Low thread priority:    1
Current Inversions: 788060
Stopping test
Total inversion performed: 788062
Test Duration: 0 days, 0 hours, 0 minutes, 11 seconds

<----------------------------> Without RT <----------------------------->
Starting PI Stress Test
Number of thread groups: 1
Duration of test run: 10 seconds
Number of inversions per group: unlimited
Test threads using scheduler policy: SCHED_FIFO
    Admin thread priority:  4
1 groups of 3 threads will be created
    High thread priority:   3
    Med  thread priority:   2
    Low thread priority:    1
Current Inversions: 944411
Stopping test
Total inversion performed: 944413
Test Duration: 0 days, 0 hours, 0 minutes, 11 seconds

<----------------------------> Explicació <----------------------------->

El nostre sistema original tracta la inversió de prioritats tal i com es pot veure a la execució del software.

********************************************************************************
********************************* cyclictest ***********************************
********************************************************************************

<------------------------------> With RT <------------------------------>

# Total: 000000255 000000192
# Min Latencies: 00005 00005
# Avg Latencies: 00055 00057
# Max Latencies: 02357 01940
# Histogram Overflows: 133885 133948
# Histogram Overflow at cycle number:
# Thread 0: 00000 00001 00002 00003 00004 00005 00006 00007 00008 00009 00010 00011 00012 00013 00014 00015 00016 00017 00018 00019 00020 00021 00022 00023 00024 00025 00026 00027 00028 00029 00030 00031 00032 00033 00034 00035 00036 00037 00038 00039 # 133845 others
# Thread 1: 00000 00001 00002 00003 00004 00005 00006 00007 00008 00009 00010 00011 00012 00013 00014 00015 00016 00017 00018 00019 00020 00021 00022 00023 00024 00025 00026 00027 00028 00029 00030 00031 00032 00033 00034 00035 00036 00037 00038 00039 # 133908 others

<----------------------------> Without RT <----------------------------->

# Total: 000000052 000000094
# Min Latencies: 00008 00012
# Avg Latencies: 00061 00061
# Max Latencies: 04166 03982
# Histogram Overflows: 125709 125667
# Histogram Overflow at cycle number:
# Thread 0: 00000 00001 00002 00003 00004 00005 00006 00007 00008 00009 00010 00011 00012 00013 00014 00015 00016 00017 00018 00019 00020 00021 00022 00023 00024 00025 00026 00027 00028 00029 00030 00031 00032 00033 00034 00035 00036 00037 00038 00039 # 125669 others
# Thread 1: 00000 00001 00002 00003 00004 00005 00006 00007 00009 00010 00011 00012 00013 00014 00015 00016 00017 00018 00019 00020 00021 00022 00023 00024 00025 00026 00027 00028 00029 00030 00031 00032 00033 00034 00035 00036 00037 00038 00039 00040 # 125627 others

<----------------------------> Comparació <----------------------------->

Podem observar com hi ha una disminució d'overflows i de làtencies en el cas del kernel RT. De fet, si treiem números podem fer el següent:
----------------------------------------------------------
| Sistema | Min Lat | Avg Lat |   Max Lat   | Sp Max Lat |
----------------------------------------------------------
|  RT     |  5  5   | 55  57  |  2357 1940  | 1.77  2.05 |
----------------------------------------------------------
|  NO RT  |  8  12  | 61  61  |  4166 3982  |  -     -   |
----------------------------------------------------------

És a dir, podem veure que de mitja tenim millora pero que en la latencia màxima, que es el pitjor cas, s'obté una millora  de gairabé el doble.

En quant als overflows, obtenim gairebé els mateixos. Això també es degut a que, tal i com diu al README de l'aplicació:

Running cyclictest only over a short period of time and without creating
appropriate real-time stress conditions is rather meaningless, since the
execution of an asynchronous event from idle state is normally always quite
fast, and every - even non-RT system - can do that. The challenge is to minimize
 the latency when reacting to an asynchronuous event, irrespective of what code
path is executed at the time when the external event arrives.
Therefore, specific stress conditions must be present while cyclictest is
running to reliably determine the worst-case latency of a given system.

Per tant, ja és normal que tampoc obtinguem una millora veritablement substancial.
